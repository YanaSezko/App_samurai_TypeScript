{"version":3,"sources":["api/api.ts","redux/dialogs-reducer.tsx","components/common/Paginator/Paginator.module.css","components/Users/Users.module.css","img/preloader.svg","components/common/FormsControls/FormsControls.module.css","serviceWorker.ts","components/Navbar/Navdar.tsx","components/Header/Header.tsx","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-reducer .tsx","redux/users-selectors.tsx","components/Users/UsersContainer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","hoc/withSuspense.tsx","App.tsx","index.tsx","components/Navbar/Navdar.module.css","img/logo.png","components/common/FormsControls/FormsControls.tsx","components/common/Preloader.tsx","utils/validators/validators.tsx","components/Header/Header.module.css","redux/profile-reducer.tsx"],"names":["instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","log","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","initialState","messages","id","message","dialogs","name","newMessageBody","sendMessageActionCreator","type","dialogsReducer","state","action","body","module","exports","Boolean","window","location","hostname","match","Navbar","className","s","nav","to","activeClassName","active","Header","props","header","src","logo","alt","loginBlock","isAuth","onClick","setAuthUserData","payload","getAuthUserData","dispatch","a","resultCode","authReducer","HeaderContainer","this","React","Component","connect","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","placeholder","component","Input","validate","required","style","formSummaryError","length","stopSubmit","_error","formData","rememborMe","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","filter","p","map","styles","selected","e","User","user","followingInProgress","userPhoto","photos","small","followed","disabled","some","Users","totalUsersCount","users","u","key","isFetching","fake","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","usersReducer","count","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","Preloader","compose","bind","page","items","totalCount","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","AppContainer","withRouter","promise","Promise","all","MainApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","Textarea","input","meta","touched","hasError","formControl","preloader","value","maxLengthCreator","maxLength","posts","newPostText","profile","addPostActionCreator","setStatus","getUserProfile","newPost"],"mappings":"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","file":"static/js/main.40487268.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { UserType } from '../redux/store'\r\n\r\ntype GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount:number\r\n    error: string | null\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"2b6e2e12-95e4-4959-af89-fb3a85f352e8\"\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response =>{\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: any) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        console.log(\"Obsolele method. Please  profileAPI object.\")\r\n        return profileAPI.getProfile(userId)\r\n\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, { status: status })\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n  \r\n    login(email:any,password:any,rememberMe=false) {\r\n        return instance.post(`auth/login`, {email,password,rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n","import { AnyCnameRecord } from \"dns\";\r\n\r\nexport type DialogsActionsType =\r\n| ReturnType<typeof sendMessageActionCreator>\r\n\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\nexport type SendMessageActionType = ReturnType<typeof sendMessageActionCreator>\r\n\r\n\r\nlet initialState = {\r\n    messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'Hello' },\r\n        { id: 3, message: 'How are you?' },\r\n    ],\r\n    dialogs: [\r\n        { id: 1, name: 'Yana' },\r\n        { id: 2, name: 'Olya' },\r\n        { id: 3, name: 'Vova' },\r\n        { id: 4, name: 'Alex' },\r\n        { id: 5, name: 'Zlata' }\r\n    ],\r\n    newMessageBody:''\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogsActionsType) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages,{ id: 4, message: body }]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageActionCreator = (newMessageBody:string) =>\r\n    ({ type: SEND_MESSAGE, newMessageBody } as const)\r\n\r\nexport default dialogsReducer\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Paginator_selected__2zWXS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__EGUfI\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.2569dfb7.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3jvrX\",\"error\":\"FormsControls_error__215TQ\",\"formSummaryError\":\"FormsControls_formSummaryError__LwGbu\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport s from './Navdar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar: React.FC<any> = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <ul>\r\n                <li><NavLink to=\"/profile\" activeClassName={s.active}\r\n                >Profile</NavLink></li>\r\n                <li><NavLink to=\"/dialogs\" activeClassName={s.active}\r\n                >Messages</NavLink></li>\r\n                <li><NavLink to=\"/users\" activeClassName={s.active}\r\n                >Users</NavLink></li>\r\n                <li><NavLink to=\"#\">News</NavLink></li>\r\n                <li><NavLink to=\"#\">Music</NavLink></li>\r\n                <li><NavLink to=\"#\">Settings</NavLink></li>\r\n                \r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport s from './Header.module.css';\r\nimport logo from \"../../img/logo.png\"\r\nimport { NavLink } from 'react-router-dom';\r\nimport { logout } from './../../redux/auth-reducer';\r\n\r\nconst Header: React.FC<any> = (props:any) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src={logo} alt=\"logo\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth \r\n                ? <div>{props.login} - <button onClick={props.logout}>LOGOUT</button></div> \r\n                :<NavLink to={\"/login\"}>Login</NavLink>\r\n}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;\r\n","import { stopSubmit } from \"redux-form\"\r\nimport { authAPI } from \"../api/api\"\r\n\r\n\r\nconst SET_USER_DATA = '/auth/SET_USER_DATA'\r\n\r\nexport type InitialStateType = {\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n}\r\nexport type AuthActionsType =\r\n| ReturnType<typeof setAuthUserData>\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId:any, email:any, login:any, isAuth:any) =>\r\n    ({ type: SET_USER_DATA, payload: { userId, email, login, isAuth } } as const)\r\n\r\n//Thunk\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let { id, email, login } = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: any, password: any, rememberMe: boolean) => async (dispatch: any) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n\r\n    if (response.data.resultCode === 0) {\r\n      \r\n        dispatch(getAuthUserData())\r\n    } else {\r\n\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"some error\"\r\n        debugger\r\n        dispatch(stopSubmit(\"login\", { _error: message }))\r\n    }\r\n\r\n}\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport { connect } from \"react-redux\";\r\nimport {logout} from \"./../../redux/auth-reducer\"\r\nimport { RootStateType } from \"../../redux/store\";\r\n\r\n\r\ntype PropsType = OwnPropsType\r\n\r\ntype MapStatePropsType ={\r\n}\r\ntype MapDispatchPropsType ={\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component <PropsType>{\r\n       render(){\r\n    return <Header {...this.props}/>\r\n    }\r\n}\r\nconst mapStateToProps=(state:RootStateType)=>({\r\n    isAuth:state.auth.isAuth,\r\n    login:state.auth.login,\r\n    logout:state.auth.logout\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps,{logout})(HeaderContainer);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { RootStateType } from '../../redux/store';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { required } from './../../utils/validators/validators';\r\nimport style from '../common/FormsControls/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememborMe: boolean\r\n    isAuth: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field placeholder={\"Email\"}\r\n                name={\"email\"}\r\n                component={Input}\r\n                validate={[required]} /></div>\r\n            <div><Field placeholder={\"Password\"}\r\n                name={\"password\"}\r\n                type={\"password\"}\r\n                component={Input}\r\n                validate={[required]} /></div>\r\n            <div><Field type={\"checkbox\"}\r\n                name={\"rememborMe\"}\r\n                component={Input} /></div>\r\n            {error && <div className={style.formSummaryError}>\r\n               {error}\r\n            </div>}\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememborMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login)","import React, { useState } from \"react\"\r\nimport styles from './Paginator.module.css'\r\n\r\nlet Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize=10}:any) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount/portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1)*portionSize+1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n     return <div>\r\n{portionNumber > 1 && \r\n<button onClick={()=>{setPortionNumber(portionNumber-1)}}>PREV</button>}\r\n\r\n            {pages\r\n            .filter(p=> p>= leftPortionPageNumber && p<= rightPortionPageNumber)\r\n            \r\n            \r\n            .map(p => {\r\n                //@ts-ignore\r\n                return <span className={ currentPage === p && styles.selected }\r\n                    onClick={(e) => {\r\n                        onPageChanged(p);\r\n                    }}>{p}</span>\r\n            })}\r\n\r\n{portionCount > portionNumber && \r\n<button onClick={()=>{setPortionNumber(portionNumber+1)}}>NEXT</button>}\r\n        </div>\r\n       \r\n}\r\nexport default Paginator;","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport userPhoto from '../../img/logo.png'\r\nimport { UserType } from \"../../redux/store\"\r\nimport Paginator from \"../common/Paginator/Paginator\"\r\nimport styles from './Users.module.css'\r\n\r\n\r\ntype UsersPropsType = {\r\n    followingInProgress:any\r\n    pageSize:number\r\n    totalUsersCount:number\r\n    currentPage:number\r\n    onPageChanged:(pageNumber: number) => void\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n   \r\n\r\n}\r\n\r\nlet User = ({user,followingInProgress,unfollow,follow}:any) => {\r\n      return <div>\r\n            <div>\r\n                <div>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img className={styles.userPhoto} src={user.photos.small != null ? user.photos.small : userPhoto} />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress\r\n                            .some((id:number) => id === user.id)} \r\n                            onClick={() => {unfollow(user.id)}}>\r\n                                UnFollow</button>\r\n                        \r\n                        : <button disabled={followingInProgress\r\n                            .some((id:number) => id === user.id)} \r\n                        onClick={() => {follow(user.id)}}>\r\n                                Follow</button>}\r\n\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{\"user.location.country\"}</div>\r\n                    <div>{\"user.location.city\"}</div>\r\n                </span>\r\n            </div>\r\n        </div>\r\n}\r\nexport default User;","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport userPhoto from '../../img/logo.png'\r\nimport { UserType } from \"../../redux/store\"\r\nimport Paginator from \"../common/Paginator/Paginator\"\r\nimport styles from './Users.module.css'\r\nimport { unfollow } from './../../redux/users-reducer ';\r\nimport User from \"./User\"\r\n\r\n\r\ntype UsersPropsType = {\r\n    followingInProgress: any\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n\r\n\r\n}\r\n\r\nlet Users = ({ currentPage, totalUsersCount, pageSize, onPageChanged, users, ...props }: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged} pageSize={pageSize} totalItemsCount={totalUsersCount} />\r\n        <div>\r\n            {users.map(u => <User user={u}\r\n                key={u.id}\r\n                followingInProgress={props.followingInProgress}\r\n                unfollow={props.unfollow}\r\n                follow={props.follow} />)}\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users;","import { Dispatch } from 'redux';\r\nimport { usersAPI } from '../api/api';\r\nimport { UserType } from './store';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nexport type UsersActionsType =\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n    fake: 10\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u: any) => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                /*  users:[...state.users]*/\r\n                users: state.users.map((u: any) => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return { ...state, users: action.users }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) =>\r\n    ({ type: FOLLOW, userId } as const)\r\nexport const unfollowSuccess = (userId: number) =>\r\n    ({ type: UNFOLLOW, userId } as const)\r\nexport const setUsers = (users: Array<UserType>) =>\r\n    ({ type: SET_USERS, users } as const)\r\nexport const setCurrentPage = (currentPage: number) =>\r\n    ({ type: SET_CURRENT_PAGE, currentPage } as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) =>\r\n    ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount } as const)\r\nexport const toggleIsFetching = (isFetching: boolean) =>\r\n    ({ type: TOGGLE_IS_FETCHING, isFetching } as const)\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) =>\r\n    ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId } as const)\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n     \r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch:Dispatch, userId:number, apiMethod:any, actionCreator:any)=>{\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n        let response = await apiMethod(userId);\r\n        if (response.data.resultCode == 0) {\r\n            dispatch(actionCreator(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch,userId,usersAPI.follow.bind(usersAPI),followSuccess)\r\n\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch,userId,usersAPI.unfollow.bind(usersAPI),unfollowSuccess)\r\n\r\n    }\r\n}\r\n\r\nexport default usersReducer","import { createSelector } from \"reselect\"\r\nimport { RootStateType, UserType } from \"./store\"\r\n\r\nconst getUsersSelector = (state:RootStateType)=>{\r\n    return state.usersPage.users;\r\n}\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users:Array<UserType>)=>{\r\n        return users.filter((u:UserType) => true);\r\n    })\r\n\r\nexport const getPageSize = (state: any) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: any) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: any) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: any) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: any) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport Users from \"./Users\"\r\nimport {\r\n    follow,\r\n    requestUsers,\r\n    unfollow,\r\n    setCurrentPage,\r\n    toggleFollowingProgress\r\n} from './../../redux/users-reducer ';\r\nimport Preloader from '../common/Preloader';\r\nimport { RootStateType, UserType } from '../../redux/store';\r\nimport { compose } from 'redux';\r\nimport { getPageSize, getUsers, getTotalUsersCount, getCurrentPage, getIsFetching, getFollowingInProgress } from '../../redux/users-selectors';\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n\r\n    totalUsersCount: number\r\n    isFetching: boolean\r\n    pageSize: number\r\n    currentPage: number\r\n    pageNumber: number\r\n    users: Array<UserType>\r\n}\r\ntype OwnPropsType = {\r\n    title: string\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    requestUsers: (currentPage: number, pageSize: number) => any\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    setUsers: any\r\n    setTotalUsersCount: any\r\n    setCurrentPage: any\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    followingInProgress: any\r\n    getUsers: (currentPage:number, pageSize:number)=>any\r\n}\r\n\r\ntype UsersPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<any>{\r\n\r\n    componentDidMount() {\r\n        let {currentPage,pageSize}=this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {pageSize}=this.props\r\n        this.props.getUsers(pageNumber,pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\nexport default compose(\r\n    //withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleFollowingProgress,\r\n        getUsers: requestUsers})\r\n   \r\n)(UsersContainer)\r\n\r\n","\r\nimport { getAuthUserData } from './auth-reducer';\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\nexport type AppActionsType =\r\n    | ReturnType<typeof initializedSuccess>\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () =>\r\n    ({ type: INITIALIZED_SUCCESS } as const)\r\n\r\n//Thunk\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n\r\n    Promise.all([promise])\r\n    .then(()=>{\r\n     dispatch(initializedSuccess())\r\n })\r\n\r\n}\r\n\r\nexport default appReducer","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport usersReducer from \"./users-reducer \";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport { appReducer } from './app-reducer';\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\n//For REDUX_DEVTOOLS_EXTENSION \r\n/* //@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n */\r\n\r\n\r\n","import React, { Suspense } from 'react';\r\n\r\nexport const withSuspense = (Component: any) => {\r\n\r\n    return (props: any) => {\r\n        return <Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props} />\r\n            </Suspense>\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React, { Suspense } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navdar\";\nimport { HashRouter, Route, withRouter } from \"react-router-dom\";\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\n//import ProfileContainer from './components/Profile/ProfileContainer';\n//import DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer'\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeApp } from './redux/app-reducer';\nimport { RootStateType } from './redux/store';\nimport Preloader from './components/common/Preloader';\nimport { store } from './redux/redux-store';\nimport { withSuspense } from './hoc/withSuspense';\n//@ts-ignore\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\n//@ts-ignore\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\ntype PropsType = OwnPropsType\n\ntype MapStatePropsType = {\n    initialized: boolean\n}\ntype MapDispatchPropsType = {\n    initializeApp: any\n}\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\n\n\nclass App extends React.Component<PropsType>{\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader />\n        }\n\n\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer />\n                <Navbar />\n                <main className='app-wrapper-content'>\n                    <Route path='/profile/:userId?'\n                        render={withSuspense(ProfileContainer)} />\n\n                    <Route /*exact*/ path='/dialogs'\n                        render={withSuspense(DialogsContainer)} />\n\n                    <Route path='/users'\n                        //@ts-ignore\n                        render={() => <UsersContainer />} />\n\n                    <Route path='/login'\n                        render={() => <Login />} />\n                </main>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: RootStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose(\n    withRouter,\n    connect(mapStateToProps, { initializeApp }))(App);\n\nconst MainApp = (props: any) => {\n    return <HashRouter/*  basename = {process.env.PUBLIC_URL} */>\n        <Provider store={store} >\n            //@ts-ignore\n            < AppContainer />\n        </Provider>\n    </HashRouter>\n}\n\nexport default MainApp;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n\n\n\n\nReactDOM.render(< MainApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navdar_nav__2YGIV\",\"active\":\"Navdar_active__1H7Vo\"};","module.exports = __webpack_public_path__ + \"static/media/logo.50a503b3.png\";","import React from 'react';\r\nimport styles from \"./FormsControls.module.css\"\r\n\r\n\r\nexport const Textarea = ({ input, meta:{touched,error}, ...props }: any) => {\r\n\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : '')}>\r\n            <textarea {...input} {...props} />\r\n            {hasError && <p>{error}</p>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport const Input = ({ input, meta:{touched,error}, ...props }: any) => {\r\n\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : '')}>\r\n            <input {...input} {...props} />\r\n            {hasError && <p>{error}</p>}\r\n        </div>\r\n    )\r\n\r\n}","import  React  from 'react';\r\nimport preloader from \"../../img/preloader.svg\"\r\n\r\n\r\nconst Preloader=(props:any)=>{\r\n    return <img src={preloader}/>\r\n}\r\n \r\nexport default Preloader","\r\n\r\nexport const required = (value:any) => {\r\n    if(value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\n\r\nexport const maxLengthCreator=(maxLength:any)=>(value:any)=> {\r\n    if(value&&value.length>maxLength ) return \"Max length is 30 symbols\"\r\n    \r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1capV\",\"loginBlock\":\"Header_loginBlock__EFdmg\"};","import { profileAPI, usersAPI } from \"../api/api\";\r\nimport { PostType } from \"./store\";\r\n\r\n\r\nexport type ProfileActionsType =\r\n    | ReturnType<typeof addPostActionCreator>\r\n    //| ReturnType<typeof updateNewPostTextActionCreator>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\n\r\nconst ADD_POST = 'ADD-POST';\r\n//const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\n\r\n/* export type InitialStateType={\r\n    posts:Array<any>\r\n    newPostText: string\r\n    profile:any\r\n }\r\n */\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: \"Hi, how are you?\" },\r\n        { id: 2, message: \"It's my first post\" }\r\n    ],\r\n    newPostText: \"текс сообщения\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostType = {\r\n                id: 3,\r\n                message: action.newPostText\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actionCreator\r\nexport const addPostActionCreator = (newPostText: string) =>\r\n    ({ type: ADD_POST, newPostText } as const)\r\n/* export const updateNewPostTextActionCreator = (text: string) =>\r\n    ({ type: UPDATE_NEW_POST_TEXT, newText: text } as const) */\r\nexport const setUserProfile = (profile: any) =>\r\n    ({ type: SET_USER_PROFILE, profile } as const)\r\nexport const setStatus = (status: string) =>\r\n    ({ type: SET_STATUS, status } as const)\r\n\r\n\r\n//thunkCreator    \r\nexport const getUserProfile = (userId: any) => async (dispatch: any) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: any) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default profileReducer"],"sourceRoot":""}