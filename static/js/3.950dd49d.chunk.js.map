{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","description","src","photos","large","alt","Preloader","Post","item","ava","message","MyPosts","React","memo","postsElements","posts","map","p","id","createRef","myposts","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","content","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.950dd49d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1WupG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__3fX3o\",\"description\":\"ProfileInfo_description__3pyMl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myposts\":\"MyPosts_myposts__VcAAu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2puKw\"};","import { stat } from 'fs'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst ProfileStatusWithHooks = (props:any) =>{\r\n    let [editMode,setEditMode]=useState(false)\r\n    let [status,setStatus]=useState(props.status)\r\n \r\nuseEffect(()=>{\r\n    setStatus(props.status)\r\n},[props.status ])\r\n\r\n const activateEditMode=()=>{\r\n    setEditMode(true)\r\n }\r\n const deactivateEditMode=()=>{\r\n    setEditMode(false)\r\n    props.updateStatus(status)\r\n }\r\n const onStatusChange=(e: React.ChangeEvent<HTMLInputElement>)=>{\r\n   setStatus(e.currentTarget.value)\r\n}\r\n\r\n        return <>\r\n            { !editMode &&\r\n                <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n            </div>}\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n            </div>}\r\n        </>\r\n}\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport s from './ProfileInfo.module.css'\r\nimport logo from '../../../img/logo.png'\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = any\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus }: any) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    return <>\r\n       {/*  <img src=\"https://fs-thb01.getcourse.ru/fileservice/file/thumbnail/h/ed86cd6bb0e9a18bf2eb32c623fe698d.jpg/s/f1200x/a/1005/sc/394\"\r\n            alt=\"image\" /> */}\r\n        <section className={s.description}>\r\n            <img src={profile.photos.large} alt=\"img\" />\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        </section>\r\n    </>\r\n}\r\nexport default ProfileInfo;\r\n","import React, {FC} from \"react\";\r\nimport s from './Post.module.css'\r\nimport ava from \"../../../../img/logo.png\"\r\nimport {PostType} from \"../../../../redux/store\";\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <li className={s.item}>\r\n            <img src={ava} alt=\"avatar\"/>{props.message}</li>\r\n    )\r\n}\r\nexport default Post;\r\n","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport { PostType } from \"../../../redux/store\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype MyPostType = {\r\n  //  updateNewPostText: (text: string) => void\r\n    addPost: (values:string) => void\r\n    posts: PostType[]\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostType) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post id={p.id} message={p.message} />)\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onAddPost =(values: FormDataType)=> {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <section className={s.myposts}>\r\n            <h2>my posts</h2>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <ul >\r\n                {postsElements}\r\n            </ul>\r\n        </section>\r\n    )\r\n})\r\ntype FormDataType ={\r\n    newPostText:string\r\n}\r\nconst maxLength10 =maxLengthCreator(10)\r\n\r\nconst AddNewPostForm:React.FC<InjectedFormProps<FormDataType>> = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={\"Post message\"} name=\"newPostText\" component={Textarea} validate={[required,maxLength10]}/>\r\n            <p><button>Add post</button></p>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<FormDataType>({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n","import { addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport { Dispatch } from \"redux\";\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        addPost: (newPostText:string)=>{\r\n            dispatch(addPostActionCreator(newPostText))\r\n        } \r\n    }\r\n}\r\n//@ts-ignore\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n\r\n","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\ntype ProfilePropsType=any\r\n\r\nconst Profile = (props:ProfilePropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile ={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { RootStateType } from \"../../redux/store\";\r\nimport { getUserProfile, getStatus, updateStatus} from './../../redux/profile-reducer';\r\nimport { compose } from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: any\r\n    status:string\r\n    authorizedUserId:number\r\n    isAuth:boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: any,\r\n    getStatus:any,\r\n    updateStatus:any\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType \r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) { \r\n            userId = this.props.authorizedUserId \r\n            if(!userId){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state: RootStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n    withRouter,\r\n   // withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}