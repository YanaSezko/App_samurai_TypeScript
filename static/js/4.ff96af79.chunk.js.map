{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"names":["module","exports","DialigItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","newMessageBody","isAuth","dialogsItems","values","sendMessage","compose","connect","dispatch","sendMessageActionCreator","Component","RedirectComponent","this","React","auth"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,8ICepMC,EARI,SAACC,GAChB,OACI,wBAAIC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC9B,kBAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,IAAKN,EAAMO,QCHzCC,EAJuB,SAACR,GACnC,OAAO,yBAAKC,UAAWC,IAAEO,SAAUT,EAAMS,U,iCC8CvCC,EAAcC,YAAiB,IAgB/BC,EAAsBC,YAAwB,CAACC,KAAK,wBAA9BD,EAdqC,SAACb,GAC9D,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAClBC,SAAU,CAACC,IAASX,GACpBH,KAAK,iBACDe,YAAY,wBAGpB,6BAAK,6CAMFC,EAlDC,SAACvB,GACb,IAAIwB,EAAQxB,EAAMyB,WACdC,EAAkBF,EAAMG,QACvBC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMuB,IAAKD,EAAEvB,GAAIA,GAAIuB,EAAEvB,QACrDyB,EAAmBP,EAAMQ,SACxBJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASqB,IAAKG,EAAE3B,GAAIA,GAAI2B,EAAE3B,QACvCkB,EAAMU,eAO3B,OAAKlC,EAAMmC,OAGP,yBAAKlC,UAAWC,IAAEyB,SACd,wBAAI1B,UAAWC,IAAEkC,cACZV,GAEL,yBAAKzB,UAAWC,IAAE8B,UACbD,GAEL,kBAACnB,EAAD,CAAsBG,SAfV,SAACsB,GAEjBrC,EAAMsC,YAAYD,EAAOH,oBAGH,kBAAC,IAAD,CAAU7B,GAAI,Y,OCP7BkC,sBACXC,aAfkB,SAAChB,GACnB,MAAO,CACHC,WAAYD,EAAMC,eAGD,SAACgB,GACtB,MAAO,CACHH,YAAa,SAACJ,GACVO,EAASC,YAAyBR,UCZd,SAACS,GAAmB,IAC1CC,EADyC,uKAIvC,OAAKC,KAAK7C,MAAMmC,OACT,kBAACQ,EAAcE,KAAK7C,OADI,kBAAC,IAAD,CAAUK,GAAI,eAJN,GACfyC,IAAMH,WAetC,OAHqCH,aAJJ,SAAChB,GAAD,MAA2B,CACxDW,OAAQX,EAAMuB,KAAKZ,UAGcK,CAAoCI,KDK9DL,CAGbhB","file":"static/js/4.ff96af79.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1YSVu\",\"dialogsItems\":\"Dialogs_dialogsItems__2CJwP\",\"active\":\"Dialogs_active__2Fyh7\",\"dialog\":\"Dialogs_dialog__9cCwF\",\"messages\":\"Dialogs_messages__2QNbF\",\"message\":\"Dialogs_message__2mhXQ\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DilogType = {\r\n    name: string\r\n    id: number\r\n}\r\nconst DialigItem = (props: DilogType) => {\r\n    return (\r\n        <li className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default DialigItem;\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {MessageType} from \"../../../redux/store\";\r\n\r\nconst Message:React.FC<MessageType> = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialigItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { DialogPageType } from \"../../redux/store\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required } from './../../utils/validators/validators';\r\n\r\n\r\n\r\ntype DialogsType = {\r\n    sendMessage: () => void\r\n    //updateNewMessageBody: (body: string) => void\r\n    dialogPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n    let state = props.dialogPage\r\n    let dialogsElements = state.dialogs\r\n        .map(d => <DialigItem name={d.name} key={d.id} id={d.id} />)\r\n    let messagesElements = state.messages\r\n        .map(m => <Message message={m.message} key={m.id} id={m.id} />)\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        //@ts-ignore\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <ul className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </ul>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageFormRedux  onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType ={\r\n    newMessageBody:string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} \r\n                validate={[required,maxLength50]}\r\n                name=\"newMessageBody\"\r\n                    placeholder=\"Enter your message\"\r\n                />\r\n            </div>\r\n            <div><button>send</button></div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form:\"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n","import { connect } from \"react-redux\";\r\nimport {\r\n    sendMessageActionCreator\r\n} from \"../../redux/dialogs-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogPage: state.dialogPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RootStateType } from '../redux/store';\r\n\r\n\r\n\r\nexport const withAuthRedirect = (Component:any) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            //@ts-ignore\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"} />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let mapStateToPropsForRedirect = (state: RootStateType) => ({\r\n        isAuth: state.auth.isAuth\r\n    })\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}"],"sourceRoot":""}