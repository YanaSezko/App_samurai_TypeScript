{"version":3,"sources":["api/api.ts","redux/dialogs-reducer.tsx","components/Users/Users.module.css","img/preloader.svg","components/common/FormsControls/FormsControls.tsx","serviceWorker.ts","components/Navbar/Navdar.tsx","components/Header/Header.tsx","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-reducer .tsx","redux/users-selectors.tsx","components/Users/UsersContainer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","hoc/withSuspense.tsx","App.tsx","index.tsx","components/common/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","components/Navbar/Navdar.module.css","img/logo.png","utils/validators/validators.tsx","components/Header/Header.module.css","components/common/Paginator/Paginator.module.css","redux/profile-reducer.tsx"],"names":["instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","initialState","messages","id","message","dialogs","name","newMessageBody","sendMessageActionCreator","type","dialogsReducer","state","action","body","module","exports","FormControl","input","meta","children","hasError","touched","error","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","validators","component","text","Boolean","window","location","hostname","match","Navbar","s","nav","to","activeClassName","active","Header","header","src","logo","alt","loginBlock","isAuth","onClick","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","dispatch","a","resultCode","url","authReducer","HeaderContainer","this","React","Component","connect","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","style","formSummaryError","length","stopSubmit","_error","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","filter","p","map","cn","selected","pageNumber","e","User","user","followingInProgress","userPhoto","photos","small","followed","disabled","some","Users","totalUsersCount","users","u","key","isFetching","fake","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","usersReducer","count","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","Preloader","compose","bind","page","items","totalCount","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","promise","alert","initializeApp","addEventListener","removeEventListener","exact","path","render","AppContainer","withRouter","Promise","all","MainApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","preloader","value","maxLengthCreator","maxLength","posts","newPostText","addPostActionCreator","setStatus","getUserProfile","file","getState","reject","newPost"],"mappings":"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","file":"static/js/main.e6c149e7.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { UserType } from '../redux/store'\r\n\r\ntype GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"2b6e2e12-95e4-4959-af89-fb3a85f352e8\"\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: any) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, { status: status })\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData()\r\n        formData.append('image', photoFile)\r\n\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: any) {\r\n        return instance.put(`profile`, profile)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n\r\n    login(email: any, password: any, rememberMe = false, captcha = null) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe, captcha })\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n}","import { AnyCnameRecord } from \"dns\";\r\n\r\nexport type DialogsActionsType =\r\n| ReturnType<typeof sendMessageActionCreator>\r\n\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\nexport type SendMessageActionType = ReturnType<typeof sendMessageActionCreator>\r\n\r\n\r\nlet initialState = {\r\n    messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'Hello' },\r\n        { id: 3, message: 'How are you?' },\r\n    ],\r\n    dialogs: [\r\n        { id: 1, name: 'Yana' },\r\n        { id: 2, name: 'Olya' },\r\n        { id: 3, name: 'Vova' },\r\n        { id: 4, name: 'Alex' },\r\n        { id: 5, name: 'Zlata' }\r\n    ],\r\n    newMessageBody:''\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogsActionsType) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages,{ id: 4, message: body }]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageActionCreator = (newMessageBody:string) =>\r\n    ({ type: SEND_MESSAGE, newMessageBody } as const)\r\n\r\nexport default dialogsReducer\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__EGUfI\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.2569dfb7.svg\";","import React from 'react';\r\nimport { Field } from 'redux-form';\r\nimport styles from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = ({ input, meta, children, ...props }: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: any, name: string, validators: any, component: any, props = {}, text = \"\") => {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n            name={name}\r\n            validators={validators}\r\n            component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport s from './Navdar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar: React.FC<any> = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <ul>\r\n                <li><NavLink to=\"/profile\" activeClassName={s.active}\r\n                >Profile</NavLink></li>\r\n                <li><NavLink to=\"/dialogs\" activeClassName={s.active}\r\n                >Messages</NavLink></li>\r\n                <li><NavLink to=\"/users\" activeClassName={s.active}\r\n                >Users</NavLink></li>\r\n                <li><NavLink to=\"#\">News</NavLink></li>\r\n                <li><NavLink to=\"#\">Music</NavLink></li>\r\n                <li><NavLink to=\"#\">Settings</NavLink></li>\r\n                \r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport s from './Header.module.css';\r\nimport logo from \"../../img/logo.png\"\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\n\r\n\r\nconst Header: React.FC<any> = (props:any) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src={logo} alt=\"logo\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth \r\n                ? <div>{props.login} - <button onClick={props.logout}>LOGOUT</button></div> \r\n                :  <div><NavLink to={\"/login\"}>Login</NavLink>\r\n                    <Redirect to={\"/login\"}></Redirect></div>\r\n                /* <NavLink to={\"/login\"}>Login</NavLink> */\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;\r\n","import { stopSubmit } from \"redux-form\"\r\nimport { authAPI, securityAPI } from \"../api/api\"\r\n\r\n\r\n\r\nconst SET_USER_DATA = '/auth/SET_USER_DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = '/auth/GET_CAPTCHA_URL_SUCCESS'\r\n\r\nexport type InitialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl?: any\r\n}\r\nexport type AuthActionsType =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof getCaptchaUrlSuccess>\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number|null, email: string|null, login: string|null, isAuth: boolean|null) =>\r\n    ({ type: SET_USER_DATA, payload: { userId, email, login, isAuth } } as const)\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) =>\r\n    ({ type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl } } as const)\r\n\r\n\r\n//Thunk\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let { id, email, login } = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: any, password: any, rememberMe: boolean, captcha:any) => async (dispatch: any) => {\r\n    let response = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n    if (response.data.resultCode === 0) {\r\n\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"some error\"\r\n        dispatch(stopSubmit(\"login\", { _error: message }))\r\n    }\r\n\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null,false));\r\n        }\r\n}\r\n\r\n\r\nexport default authReducer","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport { connect } from \"react-redux\";\r\nimport {logout} from \"./../../redux/auth-reducer\"\r\nimport { RootStateType } from \"../../redux/store\";\r\n\r\n\r\ntype PropsType = OwnPropsType\r\n\r\ntype MapStatePropsType ={\r\n}\r\ntype MapDispatchPropsType ={\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component <PropsType>{\r\n       render(){\r\n    return <Header {...this.props}/>\r\n    }\r\n}\r\nconst mapStateToProps=(state:RootStateType)=>({\r\n    isAuth:state.auth.isAuth,\r\n    login:state.auth.login,\r\n    logout:state.auth.logout\r\n})\r\n\r\nexport default connect(mapStateToProps,{logout})(HeaderContainer);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { reduxForm } from 'redux-form';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { RootStateType } from '../../redux/store';\r\nimport { createField, Input } from '../common/FormsControls/FormsControls';\r\nimport { required } from './../../utils/validators/validators';\r\nimport style from '../common/FormsControls/FormsControls.module.css'\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememborMe: boolean\r\n    isAuth: boolean\r\n    captchaUrl: any\r\n}\r\n\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }:any) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {createField(\"Email\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, { type: \"password\" })}\r\n            {createField(null, \"rememberMe\", {}, Input, { type: \"checkbox\" }, \"remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: any) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        //@ts-ignore\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, { login })(Login);\r\n\r\n\r\n","import React, { useState } from \"react\"\r\nimport styles from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\nlet Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize=10}:any) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount/portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1)*portionSize+1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n     return <div>\r\n{portionNumber > 1 && \r\n<button onClick={()=>{setPortionNumber(portionNumber-1)}}>PREV</button>}\r\n\r\n            {pages\r\n            .filter(p=> p>= leftPortionPageNumber && p<= rightPortionPageNumber)\r\n            \r\n            \r\n            .map(p => {\r\n                //@ts-ignore\r\n                return <span className={cn(\r\n                    {\r\n                      [ styles.selected ]: currentPage === p \r\n                    }, styles.pageNumber) /* currentPage === p && styles.selected */ }\r\n                    onClick={(e) => {\r\n                        onPageChanged(p);\r\n                    }}>{p}</span>\r\n            })}\r\n\r\n{portionCount > portionNumber && \r\n<button onClick={()=>{setPortionNumber(portionNumber+1)}}>NEXT</button>}\r\n        </div>\r\n       \r\n}\r\nexport default Paginator;","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport userPhoto from '../../img/logo.png'\r\nimport { UserType } from \"../../redux/store\"\r\nimport Paginator from \"../common/Paginator/Paginator\"\r\nimport styles from './Users.module.css'\r\n\r\n\r\ntype UsersPropsType = {\r\n    followingInProgress:any\r\n    pageSize:number\r\n    totalUsersCount:number\r\n    currentPage:number\r\n    onPageChanged:(pageNumber: number) => void\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n   \r\n\r\n}\r\n\r\nlet User = ({user,followingInProgress,unfollow,follow}:any) => {\r\n      return <div>\r\n            <div>\r\n                <div>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img className={styles.userPhoto} src={user.photos.small != null ? user.photos.small : userPhoto} />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress\r\n                            .some((id:number) => id === user.id)} \r\n                            onClick={() => {unfollow(user.id)}}>\r\n                                UnFollow</button>\r\n                        \r\n                        : <button disabled={followingInProgress\r\n                            .some((id:number) => id === user.id)} \r\n                        onClick={() => {follow(user.id)}}>\r\n                                Follow</button>}\r\n\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{\"user.location.country\"}</div>\r\n                    <div>{\"user.location.city\"}</div>\r\n                </span>\r\n            </div>\r\n        </div>\r\n}\r\nexport default User;","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport userPhoto from '../../img/logo.png'\r\nimport { UserType } from \"../../redux/store\"\r\nimport Paginator from \"../common/Paginator/Paginator\"\r\nimport styles from './Users.module.css'\r\nimport { unfollow } from './../../redux/users-reducer ';\r\nimport User from \"./User\"\r\n\r\n\r\ntype UsersPropsType = {\r\n    followingInProgress: any\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n\r\n\r\n}\r\n\r\nlet Users = ({ currentPage, totalUsersCount, pageSize, onPageChanged, users, ...props }: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged} pageSize={pageSize} totalItemsCount={totalUsersCount} />\r\n        <div>\r\n            {users.map(u => <User user={u}\r\n                key={u.id}\r\n                followingInProgress={props.followingInProgress}\r\n                unfollow={props.unfollow}\r\n                follow={props.follow} />)}\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users;","import { Dispatch } from 'redux';\r\nimport { usersAPI } from '../api/api';\r\nimport { UserType } from './store';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nexport type UsersActionsType =\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n    fake: 10\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u: any) => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                /*  users:[...state.users]*/\r\n                users: state.users.map((u: any) => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return { ...state, users: action.users }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) =>\r\n    ({ type: FOLLOW, userId } as const)\r\nexport const unfollowSuccess = (userId: number) =>\r\n    ({ type: UNFOLLOW, userId } as const)\r\nexport const setUsers = (users: Array<UserType>) =>\r\n    ({ type: SET_USERS, users } as const)\r\nexport const setCurrentPage = (currentPage: number) =>\r\n    ({ type: SET_CURRENT_PAGE, currentPage } as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) =>\r\n    ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount } as const)\r\nexport const toggleIsFetching = (isFetching: boolean) =>\r\n    ({ type: TOGGLE_IS_FETCHING, isFetching } as const)\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) =>\r\n    ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId } as const)\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n     \r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch:Dispatch, userId:number, apiMethod:any, actionCreator:any)=>{\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n        let response = await apiMethod(userId);\r\n        if (response.data.resultCode == 0) {\r\n            dispatch(actionCreator(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch,userId,usersAPI.follow.bind(usersAPI),followSuccess)\r\n\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch,userId,usersAPI.unfollow.bind(usersAPI),unfollowSuccess)\r\n\r\n    }\r\n}\r\n\r\nexport default usersReducer","import { createSelector } from \"reselect\"\r\nimport { RootStateType, UserType } from \"./store\"\r\n\r\nconst getUsersSelector = (state:RootStateType)=>{\r\n    return state.usersPage.users;\r\n}\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users:Array<UserType>)=>{\r\n        return users.filter((u:UserType) => true);\r\n    })\r\n\r\nexport const getPageSize = (state: any) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: any) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: any) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: any) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: any) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport Users from \"./Users\"\r\nimport {\r\n    follow,\r\n    requestUsers,\r\n    unfollow,\r\n    setCurrentPage,\r\n    toggleFollowingProgress\r\n} from './../../redux/users-reducer ';\r\nimport Preloader from '../common/Preloader';\r\nimport { RootStateType, UserType } from '../../redux/store';\r\nimport { compose } from 'redux';\r\nimport { getPageSize, getUsers, getTotalUsersCount, getCurrentPage, getIsFetching, getFollowingInProgress } from '../../redux/users-selectors';\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n\r\n    totalUsersCount: number\r\n    isFetching: boolean\r\n    pageSize: number\r\n    currentPage: number\r\n    pageNumber: number\r\n    users: Array<UserType>\r\n}\r\ntype OwnPropsType = {\r\n    title: string\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    requestUsers: (currentPage: number, pageSize: number) => any\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    setUsers: any\r\n    setTotalUsersCount: any\r\n    setCurrentPage: any\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    followingInProgress: any\r\n    getUsers: (currentPage:number, pageSize:number)=>any\r\n}\r\n\r\ntype UsersPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<any>{\r\n\r\n    componentDidMount() {\r\n        let {currentPage,pageSize}=this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {pageSize}=this.props\r\n        this.props.getUsers(pageNumber,pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\nexport default compose(\r\n    //withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleFollowingProgress,\r\n        getUsers: requestUsers})\r\n   \r\n)(UsersContainer)\r\n\r\n","\r\nimport { getAuthUserData } from './auth-reducer';\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\nexport type AppActionsType =\r\n    | ReturnType<typeof initializedSuccess>\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () =>\r\n    ({ type: INITIALIZED_SUCCESS } as const)\r\n\r\n//Thunk\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n\r\n    Promise.all([promise])\r\n    .then(()=>{\r\n     dispatch(initializedSuccess())\r\n })\r\n\r\n}\r\n\r\nexport default appReducer","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport usersReducer from \"./users-reducer \";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport { appReducer } from './app-reducer';\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\n//For REDUX_DEVTOOLS_EXTENSION \r\n/* //@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n */\r\n\r\n\r\n","import React from 'react';\r\nimport Preloader from '../components/common/Preloader';\r\n\r\nexport const withSuspense = (Component:any) =>{\r\n    return (props:any) => {\r\n        return  <React.Suspense fallback={<Preloader/>}>\r\n                    <Component {...props} />\r\n                </React.Suspense> \r\n                };\r\n            }","import React, { Suspense } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navdar\";\nimport { HashRouter, Redirect, Route, Switch, withRouter } from \"react-router-dom\";\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\n//import ProfileContainer from './components/Profile/ProfileContainer';\n//import DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer'\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeApp } from './redux/app-reducer';\nimport { RootStateType } from './redux/store';\nimport Preloader from './components/common/Preloader';\nimport { store } from './redux/redux-store';\nimport { withSuspense } from './hoc/withSuspense';\nimport { AnyNsRecord } from 'dns';\n//@ts-ignore\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\n//@ts-ignore\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\ntype PropsType = OwnPropsType\n\ntype MapStatePropsType = {\n    initialized: boolean\n}\ntype MapDispatchPropsType = {\n    initializeApp: any\n}\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\n\n\nclass App extends React.Component<PropsType>{\n    catchAllUnhandledErrors = ({reason,promise}: any) => {\n        alert(\"Some error occured\")\n    }\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader />\n        }\n\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer />\n                <Navbar />\n                <main className='app-wrapper-content'>\n                    <Switch>\n                        <Route exact path='/'\n                            render={() => <Redirect to={\"/profile\"} />} />\n\n                        <Route path='/profile/:userId?'\n                            render={withSuspense(ProfileContainer)} />\n\n                        <Route path='/dialogs'\n                            render={withSuspense(DialogsContainer)} />\n\n                        <Route path='/users'\n                            render={() => <UsersContainer />} />\n\n                        <Route path='/login'\n                            render={() => <Login />} />\n\n                        <Route path='*'\n                            render={() => <div>404 NOT FOUND</div>} />\n                    </Switch>\n                </main>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: RootStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer: any = compose(\n    withRouter,\n    connect(mapStateToProps, { initializeApp }))(App);\n\nconst MainApp = (props: any) => {\n    return <HashRouter/*  basename = {process.env.PUBLIC_URL} */>\n        <Provider store={store} >\n            < AppContainer />\n        </Provider>\n    </HashRouter>\n}\n\nexport default MainApp;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n\n\n\n\nReactDOM.render(< MainApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import  React  from 'react';\r\nimport preloader from \"../../img/preloader.svg\"\r\n\r\n\r\nconst Preloader=(props:any)=>{\r\n    return <img src={preloader}/>\r\n}\r\n \r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3jvrX\",\"error\":\"FormsControls_error__215TQ\",\"formSummaryError\":\"FormsControls_formSummaryError__LwGbu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navdar_nav__2YGIV\",\"active\":\"Navdar_active__1H7Vo\"};","module.exports = __webpack_public_path__ + \"static/media/logo.50a503b3.png\";","\r\n\r\nexport const required = (value:any) => {\r\n    if(value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\n\r\nexport const maxLengthCreator=(maxLength:any)=>(value:any)=> {\r\n    if(value&&value.length>maxLength ) return \"Max length is 30 symbols\"\r\n    \r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1capV\",\"loginBlock\":\"Header_loginBlock__EFdmg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumber\":\"Paginator_pageNumber__1awr0\",\"selected\":\"Paginator_selected__2zWXS\"};","import { stopSubmit } from \"redux-form\";\r\nimport { profileAPI, usersAPI } from \"../api/api\";\r\nimport getState, { PostType } from \"./store\";\r\n\r\n\r\n\r\n\r\nexport type ProfileActionsType =\r\n    | ReturnType<typeof addPostActionCreator>\r\n    //| ReturnType<typeof updateNewPostTextActionCreator>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\nconst ADD_POST = 'ADD-POST';\r\n//const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS'\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: \"Hi, how are you?\" },\r\n        { id: 2, message: \"It's my first post\" }\r\n    ],\r\n    newPostText: \"текс сообщения\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\ntype initialStateType = {\r\n    posts: any\r\n    newPostText: string\r\n    profile: any\r\n    status: string\r\n}\r\n\r\nexport const profileReducer = (state: initialStateType = initialState, action: ProfileActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostType = {\r\n                id: 3,\r\n                message: action.newPostText\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: action.photos\r\n                }\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actionCreator\r\nexport const addPostActionCreator = (newPostText: string) =>\r\n    ({ type: ADD_POST, newPostText } as const)\r\n/* export const updateNewPostTextActionCreator = (text: string) =>\r\n    ({ type: UPDATE_NEW_POST_TEXT, newText: text } as const) */\r\nexport const setUserProfile = (profile: any) =>\r\n    ({ type: SET_USER_PROFILE, profile } as const)\r\nexport const setStatus = (status: string) =>\r\n    ({ type: SET_STATUS, status } as const)\r\nexport const savePhotoSuccess = (photos: any) =>\r\n    ({ type: SAVE_PHOTO_SUCCESS, photos } as const)\r\n\r\n//thunkCreator    \r\nexport const getUserProfile = (userId: any) => async (dispatch: any) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: any) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n    let response = await profileAPI.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: any) => async ( dispatch:any, getState:any)=> {\r\n    const userId = getState().auth.userId\r\n    let response = await profileAPI.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserProfile(userId));\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", { _error: response.data.messages[0] }))//{\"contacts\":{\"facebook\":response.data.messages[0]}}\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer"],"sourceRoot":""}