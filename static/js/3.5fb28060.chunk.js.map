{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Post","props","className","s","item","src","ava","alt","message","MyPosts","React","memo","postsElements","posts","reverse","map","p","id","createRef","myposts","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataReduxForm","profile","error","style","formSummaryError","createField","Input","type","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","profileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","description","photos","large","logo","target","files","length","initialValues","formData","then","Profile","content","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.5fb28060.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__3fX3o\",\"description\":\"ProfileInfo_description__3pyMl\",\"profileData\":\"ProfileInfo_profileData__3z3b6\",\"contact\":\"ProfileInfo_contact__1yHsg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1WupG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myposts\":\"MyPosts_myposts__VcAAu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2puKw\"};","import React, {FC} from \"react\";\r\nimport s from './Post.module.css'\r\nimport ava from \"../../../../img/logo.png\"\r\nimport {PostType} from \"../../../../redux/store\";\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <li className={s.item}>\r\n            <img src={ava} alt=\"avatar\"/>{props.message}</li>\r\n    )\r\n}\r\nexport default Post;\r\n","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport { PostType } from \"../../../redux/store\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype MyPostType = {\r\n    //  updateNewPostText: (text: string) => void\r\n    addPost: (values: string) => void\r\n    posts: PostType[]\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostType) => {\r\n\r\n    let postsElements = \r\n[...props.posts].reverse()\r\n    .map(p => <Post id={p.id} message={p.message} />)\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <section className={s.myposts}>\r\n            <h2>my posts</h2>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <ul >\r\n                {postsElements}\r\n            </ul>\r\n        </section>\r\n    )\r\n})\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props: any) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field placeholder={\"Post message\"} name=\"newPostText\" component={Textarea} validate={[required, maxLength10]} />\r\n                <p><button>Add post</button></p>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<FormDataType>({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n","import { addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport { Dispatch } from \"redux\";\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        addPost: (newPostText:string)=>{\r\n            dispatch(addPostActionCreator(newPostText))\r\n        } \r\n    }\r\n}\r\n//@ts-ignore\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n\r\n","import { stat } from 'fs'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst ProfileStatusWithHooks = (props:any) =>{\r\n    let [editMode,setEditMode]=useState(false)\r\n    let [status,setStatus]=useState(props.status)\r\n \r\nuseEffect(()=>{\r\n    setStatus(props.status)\r\n},[props.status ])\r\n\r\n const activateEditMode=()=>{\r\n    setEditMode(true)\r\n }\r\n const deactivateEditMode=()=>{\r\n    setEditMode(false)\r\n    props.updateStatus(status)\r\n }\r\n const onStatusChange=(e: React.ChangeEvent<HTMLInputElement>)=>{\r\n   setStatus(e.currentTarget.value)\r\n}\r\n\r\n        return <>\r\n            { !editMode &&\r\n                <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n            </div>}\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n            </div>}\r\n        </>\r\n}\r\nexport default ProfileStatusWithHooks","import React from 'react'\r\nimport { reduxForm } from 'redux-form'\r\nimport s from './ProfileInfo.module.css'\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls'\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }: any) => {\r\n    return <div>\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>save</button></div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div><b>Full name</b>:{createField(\"Full name\", \"fullName\", {}, Input)}</div>\r\n            <div> <b>Looking for a job</b>:{createField(\"\", \"Looking for a job\", [], Input, { type: \"checkbox\" })}</div>\r\n            <div> <b>My professional skills</b>:{createField(\"My professional skills\", \"LookingForAJobDescription\", [], Textarea)}</div>\r\n            <div> <b>About me</b>:\r\n            {createField(\"About me\", \"aboutMe\", [], Textarea)}</div>\r\n            <div> <b>Contacts</b>:{Object.keys(profile.contacts).map((key: any) => {\r\n                return <div className={s.contact} key={key}>\r\n                    <b>{key}:{createField(key, \"contacts.\" + key, {}, Input)}</b>\r\n                </div>\r\n            })}</div>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm;","import React, { useState } from \"react\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport s from './ProfileInfo.module.css'\r\nimport logo from '../../../img/logo.png'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport { profileType } from \"../../../redux/store\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    isOwner: boolean\r\n    profile: profileType\r\n    status: string\r\n    updateStatus: any\r\n    savePhoto: any\r\n    saveProfile: any\r\n}\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }: ProfileInfoType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const onSubmit = (formData: any) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n\r\n    }\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return <div>\r\n        <div className={s.description}>\r\n            <img src={profile.photos.large || logo} alt=\"img\" />\r\n            {isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n\r\n            {editMode\r\n                //@ts-ignore\r\n                ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />\r\n            }\r\n\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }: any) => {\r\n    return (\r\n        <div className={s.profileData}>\r\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n            <div> <span>Full name</span>:{profile.fullName}</div>\r\n            <div> <span>Looking for a job</span>:{profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n            <div> <span>My professional skills</span>:{profile.lookingForAJobDescription}</div>\r\n            <div><span>Contacts</span>:{Object.keys(profile.contacts).map((key: any) => {\r\n                return <Contact  contactTitle={key} contactValue={profile.contacts[key]} />\r\n            })}</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }: any) => {\r\n    return <div  className={s.contact}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: any\r\n    status: string\r\n    updateStatus: any\r\n    savePhoto: any\r\n    saveProfile: any\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto} \r\n                saveProfile={props.saveProfile}\r\n                />\r\n            \r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { RootStateType } from \"../../redux/store\";\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from './../../redux/profile-reducer';\r\nimport { compose } from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: any\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: any,\r\n    getStatus: any,\r\n    updateStatus: any,\r\n    savePhoto: any,\r\n    saveProfile:any\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any, prevState: any, snapshot: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}